import os
import numpy as np
import sounddevice as sd
import tempfile
import scipy.io.wavfile as wav
import whisperx
import torch

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–∏—Å–∏ 
SAMPLERATE = 16000
CHUNK_DURATION = 5  # —Å–µ–∫—É–Ω–¥
STOP_PHRASE = "–∑–∞–∫–æ–Ω—á–∏—Ç—å –∞—É–¥–∏–æ"
STOP_PHRASE2 = "–ó–∞–∫–æ–Ω—á–∏—Ç—å –∞—É–¥–∏–æ"


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
language_code = "ru" 
min_speakers_count = 1
max_speakers_count = 3
device = "cuda" if torch.cuda.is_available() else "cpu"
whisper_model_name = "turbo" 
compute_type = "float32" 

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ WhisperX...")
model = whisperx.load_model(whisper_arch=whisper_model_name, device=device, language=language_code, compute_type=compute_type)
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

def record_and_transcribe():
    print("üéôÔ∏è –°–ª—É—à–∞—é... –°–∫–∞–∂–∏—Ç–µ '–∑–∞–∫–æ–Ω—á–∏—Ç—å –∞—É–¥–∏–æ', —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
    audio_buffer = []

    try:
        while True:
            print(f"‚è∫Ô∏è –ó–∞–ø–∏—Å—å {CHUNK_DURATION} —Å–µ–∫—É–Ω–¥...")
            chunk = sd.rec(int(SAMPLERATE * CHUNK_DURATION), samplerate=SAMPLERATE, channels=1, dtype='float32')
            sd.wait()
            audio_buffer.append(np.squeeze(chunk))

            # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
            audio_data = np.concatenate(audio_buffer)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV-—Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmpfile:
                wav.write(tmpfile.name, SAMPLERATE, (audio_data * 32767).astype(np.int16))
                tmp_path = tmpfile.name

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å whisperx
            print("üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é...")
            audio = whisperx.load_audio(tmp_path)
            result = model.transcribe(audio)

            # text = result.get("text", "").strip().lower()
            # text = result["segments"] –≤—Å—è –∏–Ω—Ñ–∞ 
            text = result["segments"]


            print("üó£Ô∏è –í—ã —Å–∫–∞–∑–∞–ª–∏:", text)

            if STOP_PHRASE in text:
                print("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                break

        print("\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
        print(result["text"])

    except Exception as e:
        print("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", e)

if __name__ == "__main__":
    record_and_transcribe()
