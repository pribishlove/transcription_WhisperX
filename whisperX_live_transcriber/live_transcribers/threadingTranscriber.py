import threading
import queue
import numpy as np
import sounddevice as sd
import tempfile
import scipy.io.wavfile as wav
import whisperx
import torch

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
SAMPLERATE = 16000
CHUNK_DURATION = 5  # —Å–µ–∫—É–Ω–¥
#STOP_PHRASE = "–∑–∞–∫–æ–Ω—á–∏—Ç—å –∞—É–¥–∏–æ"
language_code = "ru"
device = "cuda" if torch.cuda.is_available() else "cpu"
model_name = "turbo"
compute_type = "float32"

# --- –û—á–µ—Ä–µ–¥—å –∞—É–¥–∏–æ —á–∞–Ω–∫–æ–≤ ---
audio_queue = queue.Queue()
stop_event = threading.Event()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ WhisperX...")
model = whisperx.load_model(whisper_arch=model_name, device=device, language=language_code, compute_type=compute_type)
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")

# --- –ó–∞–ø–∏—Å—å —á–∞–Ω–∫–æ–≤ ---
def record_audio():
    while not stop_event.is_set():
#        print("üéôÔ∏è –ó–∞–ø–∏—Å—å —á–∞–Ω–∫–∞...")
        chunk = sd.rec(int(SAMPLERATE * CHUNK_DURATION), samplerate=SAMPLERATE, channels=1, dtype='float32')
        sd.wait()
        audio_queue.put(np.squeeze(chunk))
#        print("üì¶ –ß–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

# --- –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–∞–Ω–∫–æ–≤ ---
def transcribe_loop():
    full_transcript = ""
    while not stop_event.is_set() or not audio_queue.empty():
        try:
            chunk = audio_queue.get(timeout=1)
        except queue.Empty:
            continue
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmpfile:
            wav.write(tmpfile.name, SAMPLERATE, (chunk * 32767).astype(np.int16))
            tmp_path = tmpfile.name

#        print("üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é —á–∞–Ω–∫...")
        audio = whisperx.load_audio(tmp_path)
        result = model.transcribe(audio)
        segments = result.get("segments", [])
        for seg in segments:
            clean_text = seg["text"].strip().lower()  # —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —É–±–µ—Ä–∞–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
            print(clean_text)
            # full_transcript += " " + text

        # if STOP_PHRASE in text:
        #     print("üõë –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        #     stop_event.set()


    # print("\nüìã –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
    # print(full_transcript.strip())

# --- –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ ---
rec_thread = threading.Thread(target=record_audio)
trans_thread = threading.Thread(target=transcribe_loop)

print("‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º...")
rec_thread.start()
trans_thread.start()

rec_thread.join()
trans_thread.join()
print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
